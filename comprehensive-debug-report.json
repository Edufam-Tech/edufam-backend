{
  "timestamp": "2025-08-06T16:37:22.592Z",
  "duration": 23.763,
  "summary": {
    "totalIssues": 17,
    "totalWarnings": 7,
    "systemStatus": "POOR"
  },
  "reports": {
    "environment": {
      "timestamp": "2025-08-06T16:36:58.827Z",
      "required": {
        "DATABASE_URL": "SET",
        "JWT_SECRET": "SET",
        "JWT_REFRESH_SECRET": "SET",
        "PORT": "SET"
      },
      "optional": {
        "NODE_ENV": "development",
        "MAINTENANCE_MODE": "NOT_SET",
        "JWT_EXPIRES_IN": "15m",
        "JWT_REFRESH_EXPIRES_IN": "7d"
      },
      "missing": [],
      "warnings": []
    },
    "fileSystem": {
      "timestamp": "2025-08-06T16:36:58.830Z",
      "directories": {
        "uploads": "EXISTS",
        "src": "EXISTS",
        "src/config": "EXISTS",
        "src/controllers": "EXISTS",
        "src/middleware": "EXISTS",
        "src/models": "EXISTS",
        "src/routes": "EXISTS",
        "src/services": "EXISTS",
        "src/utils": "EXISTS",
        "tests": "EXISTS",
        "database": "EXISTS"
      },
      "files": {
        "package.json": "EXISTS",
        "server.js": "EXISTS",
        "src/config/database.js": "EXISTS",
        "src/services/authService.js": "EXISTS",
        "src/services/userService.js": "EXISTS",
        "database/schema.sql": "EXISTS"
      },
      "issues": [
        "Uploads directory may have incorrect permissions"
      ]
    },
    "dependencies": {
      "timestamp": "2025-08-06T16:36:58.836Z",
      "dependencies": {
        "bcrypt": "^6.0.0",
        "bcryptjs": "^2.4.3",
        "compression": "^1.8.1",
        "cors": "^2.8.5",
        "csv-parser": "^3.2.0",
        "dotenv": "^16.3.1",
        "express": "^4.18.2",
        "express-rate-limit": "^7.1.5",
        "express-validator": "^7.0.1",
        "helmet": "^7.2.0",
        "joi": "^17.11.0",
        "jsonwebtoken": "^9.0.2",
        "morgan": "^1.10.0",
        "multer": "^1.4.5-lts.1",
        "pg": "^8.11.3",
        "sharp": "^0.32.6",
        "socket.io": "^4.8.1",
        "socket.io-client": "^4.8.1",
        "uuid": "^11.1.0",
        "winston": "^3.11.0",
        "ws": "^8.18.3"
      },
      "devDependencies": {
        "axios": "^1.11.0",
        "eslint": "^8.55.0",
        "form-data": "^4.0.4",
        "jest": "^29.7.0",
        "nodemon": "^3.0.2",
        "prettier": "^3.1.1",
        "supertest": "^6.3.3"
      },
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js",
        "test": "node tests/backend-debug.js",
        "test:auth": "node tests/auth-test.js",
        "test:users": "node tests/users-test.js",
        "test:files": "node tests/files-test.js",
        "test:security": "node tests/security-test.js",
        "debug": "node --inspect server.js",
        "debug:system": "node debug-system.js",
        "debug:schema": "node database/validate-schema.js",
        "debug:health": "node -e \"require('./src/utils/debugger').systemHealth()\"",
        "lint": "eslint src/ --fix"
      },
      "issues": []
    },
    "databaseHealth": {
      "timestamp": "2025-08-06T16:36:58.842Z",
      "checks": {
        "schema": true,
        "rlsPolicies": true,
        "indexes": true,
        "activeSessions": "46",
        "userStats": {
          "total_users": "7",
          "school_users": "0",
          "admin_users": "7",
          "active_users": "1",
          "pending_users": "6",
          "suspended_users": "0",
          "active_last_week": "1",
          "new_users_month": "7"
        },
        "systemSettings": [
          {
            "setting_key": "allowed_file_types",
            "setting_value": "[\"jpg\",\"jpeg\",\"png\",\"pdf\",\"doc\",\"docx\"]",
            "data_type": "json",
            "is_public": false
          },
          {
            "setting_key": "maintenance_mode",
            "setting_value": "false",
            "data_type": "boolean",
            "is_public": true
          },
          {
            "setting_key": "max_file_size",
            "setting_value": "5242880",
            "data_type": "number",
            "is_public": false
          },
          {
            "setting_key": "platform_name",
            "setting_value": "Edufam",
            "data_type": "string",
            "is_public": true
          },
          {
            "setting_key": "platform_version",
            "setting_value": "1.0.0",
            "data_type": "string",
            "is_public": true
          }
        ],
        "maintenanceMode": false,
        "fileUploads": {
          "total_files": "0",
          "profile_pictures": "0",
          "documents": "0",
          "total_size_bytes": null
        },
        "auditLogs": {
          "total_logs": "129",
          "logs_24h": "29",
          "logs_7d": "129",
          "unique_users_logged": "7"
        },
        "performance": {
          "slowQueries": [
            {
              "query": "with records as (\n  select\n    c.oid::int8 as \"id\",\n    case c.relkind\n      when $1 then pg_temp.pg_get_tabledef(\n        concat(nc.nspname),\n        concat(c.relname),\n        $2,\n        $3,\n        $4\n      )\n      when $5 then concat(\n        $6, concat(nc.nspname, $7, c.relname), $8,\n        pg_get_viewdef(concat(nc.nspname, $9, c.relname), $10)\n      )\n      when $11 then concat(\n        $12, concat(nc.nspname, $13, c.relname), $14,\n        pg_get_viewdef(concat(nc.nspname, $15, c.relname), $16)\n      )\n      when $17 then concat($18, nc.nspname, $19, c.relname, $20)\n      when $21 then pg_temp.pg_get_tabledef(\n        concat(nc.nspname),\n        concat(c.relname),\n        $22,\n        $23,\n        $24\n      )\n    end as \"sql\"\n  from\n    pg_namespace nc\n    join pg_class c on nc.oid = c.relnamespace\n  where\n    c.relkind in ($25, $26, $27, $28, $29)\n    and not pg_is_other_temp_schema(nc.oid)\n    and (\n      pg_has_role(c.relowner, $30)\n      or has_table_privilege(\n        c.oid,\n        $31\n      )\n      or has_any_column_privilege(c.oid, $32)\n    )\n    and nc.nspname IN ($33)\n  order by c.relname asc\n  limit $34\n  offset $35\n)\nselect\n  jsonb_build_object(\n    $36, coalesce(jsonb_agg(\n      jsonb_build_object(\n        $37, r.id,\n        $38, r.sql\n      )\n    ), $39::jsonb)\n  ) \"data\"\nfrom records r",
              "calls": "1",
              "total_time": 36725.001581,
              "mean_time": 36725.001581,
              "rows": "1"
            },
            {
              "query": "with records as (\n  select\n    c.oid::int8 as \"id\",\n    case c.relkind\n      when $1 then pg_temp.pg_get_tabledef(\n        concat(nc.nspname),\n        concat(c.relname),\n        $2,\n        $3,\n        $4\n      )\n      when $5 then concat(\n        $6, concat(nc.nspname, $7, c.relname), $8,\n        pg_get_viewdef(concat(nc.nspname, $9, c.relname), $10)\n      )\n      when $11 then concat(\n        $12, concat(nc.nspname, $13, c.relname), $14,\n        pg_get_viewdef(concat(nc.nspname, $15, c.relname), $16)\n      )\n      when $17 then concat($18, nc.nspname, $19, c.relname, $20)\n      when $21 then pg_temp.pg_get_tabledef(\n        concat(nc.nspname),\n        concat(c.relname),\n        $22,\n        $23,\n        $24\n      )\n    end as \"sql\"\n  from\n    pg_namespace nc\n    join pg_class c on nc.oid = c.relnamespace\n  where\n    c.relkind in ($25, $26, $27, $28, $29)\n    and not pg_is_other_temp_schema(nc.oid)\n    and (\n      pg_has_role(c.relowner, $30)\n      or has_table_privilege(\n        c.oid,\n        $31\n      )\n      or has_any_column_privilege(c.oid, $32)\n    )\n    and nc.nspname IN ($33)\n  order by c.relname asc\n  limit $34\n  offset $35\n)\nselect\n  jsonb_build_object(\n    $36, coalesce(jsonb_agg(\n      jsonb_build_object(\n        $37, r.id,\n        $38, r.sql\n      )\n    ), $39::jsonb)\n  ) \"data\"\nfrom records r",
              "calls": "1",
              "total_time": 36211.371587,
              "mean_time": 36211.371587,
              "rows": "1"
            },
            {
              "query": "SELECT \n          tc.table_name, \n          kcu.column_name, \n          ccu.table_name AS foreign_table_name,\n          ccu.column_name AS foreign_column_name,\n          tc.constraint_name\n        FROM information_schema.table_constraints AS tc \n        JOIN information_schema.key_column_usage AS kcu\n          ON tc.constraint_name = kcu.constraint_name\n          AND tc.table_schema = kcu.table_schema\n        JOIN information_schema.constraint_column_usage AS ccu\n          ON ccu.constraint_name = tc.constraint_name\n          AND ccu.table_schema = tc.table_schema\n        WHERE tc.constraint_type = $1 \n          AND tc.table_schema = $2\n        ORDER BY tc.table_name, kcu.column_name",
              "calls": "9",
              "total_time": 31452.121828,
              "mean_time": 3494.68020311111,
              "rows": "2061"
            },
            {
              "query": "with tables as (SELECT\n  c.oid :: int8 AS id,\n  nc.nspname AS schema,\n  c.relname AS name,\n  c.relrowsecurity AS rls_enabled,\n  c.relforcerowsecurity AS rls_forced,\n  CASE\n    WHEN c.relreplident = $1 THEN $2\n    WHEN c.relreplident = $3 THEN $4\n    WHEN c.relreplident = $5 THEN $6\n    ELSE $7\n  END AS replica_identity,\n  pg_total_relation_size(format($8, nc.nspname, c.relname)) :: int8 AS bytes,\n  pg_size_pretty(\n    pg_total_relation_size(format($9, nc.nspname, c.relname))\n  ) AS size,\n  pg_stat_get_live_tuples(c.oid) AS live_rows_estimate,\n  pg_stat_get_dead_tuples(c.oid) AS dead_rows_estimate,\n  obj_description(c.oid) AS comment,\n  coalesce(pk.primary_keys, $10) as primary_keys,\n  coalesce(\n    jsonb_agg(relationships) filter (where relationships is not null),\n    $11\n  ) as relationships\nFROM\n  pg_namespace nc\n  JOIN pg_class c ON nc.oid = c.relnamespace\n  left join (\n    select\n      table_id,\n      jsonb_agg(_pk.*) as primary_keys\n    from (\n      select\n        n.nspname as schema,\n        c.relname as table_name,\n        a.attname as name,\n        c.oid :: int8 as table_id\n      from\n        pg_index i,\n        pg_class c,\n        pg_attribute a,\n        pg_namespace n\n      where\n        i.indrelid = c.oid\n        and c.relnamespace = n.oid\n        and a.attrelid = c.oid\n        and a.attnum = any (i.indkey)\n        and i.indisprimary\n    ) as _pk\n    group by table_id\n  ) as pk\n  on pk.table_id = c.oid\n  left join (\n    select\n      c.oid :: int8 as id,\n      c.conname as constraint_name,\n      nsa.nspname as source_schema,\n      csa.relname as source_table_name,\n      sa.attname as source_column_name,\n      nta.nspname as target_table_schema,\n      cta.relname as target_table_name,\n      ta.attname as target_column_name\n    from\n      pg_constraint c\n    join (\n      pg_attribute sa\n      join pg_class csa on sa.attrelid = csa.oid\n      join pg_namespace nsa on csa.relnamespace = nsa.oid\n    ) on sa.attrelid = c.conrelid and sa.attnum = any (c.conkey)\n    join (\n      pg_attribute ta\n      join pg_class cta on ta.attrelid = cta.oid\n      join pg_namespace nta on cta.relnamespace = nta.oid\n    ) on ta.attrelid = c.confrelid and ta.attnum = any (c.confkey)\n    where\n      c.contype = $12\n  ) as relationships\n  on (relationships.source_schema = nc.nspname and relationships.source_table_name = c.relname)\n  or (relationships.target_table_schema = nc.nspname and relationships.target_table_name = c.relname)\nWHERE\n  c.relkind IN ($13, $14)\n  AND NOT pg_is_other_temp_schema(nc.oid)\n  AND (\n    pg_has_role(c.relowner, $15)\n    OR has_table_privilege(\n      c.oid,\n      $16\n    )\n    OR has_any_column_privilege(c.oid, $17)\n  )\ngroup by\n  c.oid,\n  c.relname,\n  c.relrowsecurity,\n  c.relforcerowsecurity,\n  c.relreplident,\n  nc.nspname,\n  pk.primary_keys\n)\n  , columns as (-- Adapted from information_schema.columns\n\nSELECT\n  c.oid :: int8 AS table_id,\n  nc.nspname AS schema,\n  c.relname AS table,\n  (c.oid || $18 || a.attnum) AS id,\n  a.attnum AS ordinal_position,\n  a.attname AS name,\n  CASE\n    WHEN a.atthasdef THEN pg_get_expr(ad.adbin, ad.adrelid)\n    ELSE $19\n  END AS default_value,\n  CASE\n    WHEN t.typtype = $20 THEN CASE\n      WHEN bt.typelem <> $21 :: oid\n      AND bt.typlen = $22 THEN $23\n      WHEN nbt.nspname = $24 THEN format_type(t.typbasetype, $25)\n      ELSE $26\n    END\n    ELSE CASE\n      WHEN t.typelem <> $27 :: oid\n      AND t.typlen = $28 THEN $29\n      WHEN nt.nspname = $30 THEN format_type(a.atttypid, $31)\n      ELSE $32\n    END\n  END AS data_type,\n  COALESCE(bt.typname, t.typname) AS format,\n  a.attidentity IN ($33, $34) AS is_identity,\n  CASE\n    a.attidentity\n    WHEN $35 THEN $36\n    WHEN $37 THEN $38\n    ELSE $39\n  END AS identity_generation,\n  a.attgenerated IN ($40) AS is_generated,\n  NOT (\n    a.attnotnull\n    OR t.typtype = $41 AND t.typnotnull\n  ) AS is_nullable,\n  (\n    c.relkind IN ($42, $43)\n    OR c.relkind IN ($44, $45) AND pg_column_is_updatable(c.oid, a.attnum, $46)\n  ) AS is_updatable,\n  uniques.table_id IS NOT NULL AS is_unique,\n  check_constraints.definition AS \"check\",\n  array_to_json(\n    array(\n      SELECT\n        enumlabel\n      FROM\n        pg_catalog.pg_enum enums\n      WHERE\n        enums.enumtypid = coalesce(bt.oid, t.oid)\n        OR enums.enumtypid = coalesce(bt.typelem, t.typelem)\n      ORDER BY\n        enums.enumsortorder\n    )\n  ) AS enums,\n  col_description(c.oid, a.attnum) AS comment\nFROM\n  pg_attribute a\n  LEFT JOIN pg_attrdef ad ON a.attrelid = ad.adrelid\n  AND a.attnum = ad.adnum\n  JOIN (\n    pg_class c\n    JOIN pg_namespace nc ON c.relnamespace = nc.oid\n  ) ON a.attrelid = c.oid\n  JOIN (\n    pg_type t\n    JOIN pg_namespace nt ON t.typnamespace = nt.oid\n  ) ON a.atttypid = t.oid\n  LEFT JOIN (\n    pg_type bt\n    JOIN pg_namespace nbt ON bt.typnamespace = nbt.oid\n  ) ON t.typtype = $47\n  AND t.typbasetype = bt.oid\n  LEFT JOIN (\n    SELECT DISTINCT ON (table_id, ordinal_position)\n      conrelid AS table_id,\n      conkey[$48] AS ordinal_position\n    FROM pg_catalog.pg_constraint\n    WHERE contype = $49 AND cardinality(conkey) = $50\n  ) AS uniques ON uniques.table_id = c.oid AND uniques.ordinal_position = a.attnum\n  LEFT JOIN (\n    -- We only select the first column check\n    SELECT DISTINCT ON (table_id, ordinal_position)\n      conrelid AS table_id,\n      conkey[$51] AS ordinal_position,\n      substring(\n        pg_get_constraintdef(pg_constraint.oid, $52),\n        $53,\n        length(pg_get_constraintdef(pg_constraint.oid, $54)) - $55\n      ) AS \"definition\"\n    FROM pg_constraint\n    WHERE contype = $56 AND cardinality(conkey) = $57\n    ORDER BY table_id, ordinal_position, oid asc\n  ) AS check_constraints ON check_constraints.table_id = c.oid AND check_constraints.ordinal_position = a.attnum\nWHERE\n  NOT pg_is_other_temp_schema(nc.oid)\n  AND a.attnum > $58\n  AND NOT a.attisdropped\n  AND (c.relkind IN ($59, $60, $61, $62, $63))\n  AND (\n    pg_has_role(c.relowner, $64)\n    OR has_column_privilege(\n      c.oid,\n      a.attnum,\n      $65\n    )\n  )\n)\nselect\n  *\n  , \nCOALESCE(\n  (\n    SELECT\n      array_agg(row_to_json(columns)) FILTER (WHERE columns.table_id = tables.id)\n    FROM\n      columns\n  ),\n  $66\n) AS columns\nfrom tables where schema IN ($67)",
              "calls": "10",
              "total_time": 9918.685756,
              "mean_time": 991.8685756,
              "rows": "372"
            },
            {
              "query": "-- Transport Module Database Schema\r\n-- This file contains all tables needed for the transport management system\r\n\r\n-- Vehicles table (fleet management)\r\nCREATE TABLE vehicles (\r\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\r\n    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,\r\n    \r\n    -- Vehicle Information\r\n    registration_number VARCHAR(20) NOT NULL,\r\n    make VARCHAR(100) NOT NULL,\r\n    model VARCHAR(100) NOT NULL,\r\n    year INTEGER NOT NULL,\r\n    color VARCHAR(50),\r\n    capacity INTEGER NOT NULL,\r\n    vehicle_type VARCHAR(50) NOT NULL CHECK (vehicle_type IN ('bus', 'minibus', 'van', 'car')),\r\n    \r\n    -- Technical Details\r\n    engine_number VARCHAR(50),\r\n    chassis_number VARCHAR(50),\r\n    fuel_type VARCHAR(20) CHECK (fuel_type IN ('petrol', 'diesel', 'electric', 'hybrid')),\r\n    transmission VARCHAR(20) CHECK (transmission IN ('manual', 'automatic')),\r\n    \r\n    -- Status and Condition\r\n    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'maintenance', 'retired', 'accident')),\r\n    condition_rating INTEGER CHECK (condition_rating >= 1 AND condition_rating <= 5),\r\n    \r\n    -- Purchase Information\r\n    purchase_date DATE,\r\n    purchase_price DECIMAL(12,2),\r\n    current_value DECIMAL(12,2),\r\n    \r\n    -- Standard fields\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    created_by UUID REFERENCES users(id),\r\n    \r\n    -- Constraints\r\n    UNIQUE(school_id, registration_number)\r\n)",
              "calls": "1",
              "total_time": 234.541581,
              "mean_time": 234.541581,
              "rows": "0"
            }
          ],
          "poolStatus": {
            "total_connections": "6",
            "active_connections": "1",
            "idle_connections": "3"
          }
        }
      }
    },
    "schemaValidation": {
      "timestamp": "2025-08-06T16:37:22.250Z",
      "results": [
        {
          "test": "Required Tables",
          "status": "PASS",
          "details": "All 12 required tables exist",
          "timestamp": "2025-08-06T16:37:04.068Z"
        },
        {
          "test": "Extra Tables",
          "status": "WARN",
          "details": "Found extra tables: academic_terms, academic_years, admin_activity_logs, admin_company_assets, admin_departments, admin_employee_leaves, admin_employee_training, admin_employees, admin_performance_reviews, admin_trip_programs, admin_trip_registrations, advanced_kpis, ai_chatbot_messages, ai_chatbot_sessions, ai_models, ai_optimization_logs, ai_predictions, alert_configurations, analytics_cache, analytics_dashboards, analytics_reports, announcements, appraisal_categories, appraisal_cycles, appraisal_feedback, appraisal_goals, appraisal_history, appraisal_questions, appraisal_responses, appraisal_reviews, appraisal_templates, appraisals, approval_decision_history, approval_level_actions, approval_metrics, approval_notifications, approval_requests, approval_rule_exceptions, approval_workflow_templates, assessments, attendance_reasons, attendance_records, attendance_registers, attendance_settings, audit_trails, bulk_certificate_jobs, cache_configurations, cache_performance_logs, cache_policies, cdn_analytics, cdn_configurations, certificate_designs, certificate_fields, certificate_signatures, certificate_templates, certificate_types, certificate_verifications, certificates_issued, class_subjects, classes, classrooms, cloud_cost_tracking, cloud_storage_configurations, communication_group_members, communication_groups, communication_logs, communication_settings, communication_templates, compliance_assessments, compliance_controls, compliance_frameworks, compliance_rules, content_localizations, credit_notes, cross_school_analytics, cross_school_notifications, curriculum_assessment_standards, curriculum_equivalencies, curriculum_grade_levels, curriculum_subjects, curriculum_systems, dashboard_widgets, data_exports, data_mapping_templates, data_mining_jobs, data_protection_records, data_subject_requests, departments, development_plans, director_active_contexts, director_favorite_schools, director_school_access, disciplinary_actions, driver_licenses, drivers, employee_attendance, employees, enrollments, external_integrations, feature_flag_assignments, feature_flags, fee_assignment_approvals, fee_assignment_history, fee_assignment_items, fee_assignment_templates, fee_assignments, fee_categories, fee_discounts, fee_structure_items, fee_structures, fee_waivers, fuel_records, grade_approvals, grade_categories, grade_comments, grades, grading_scales, hr_settings, integration_logs, invoice_discounts, invoice_items, invoice_payments, invoice_reminders, invoice_series, invoice_taxes, invoice_templates, invoices, kpi_definitions, kpi_values, languages, leave_applications, leave_balances, leave_types, localization_analytics, make_up_classes, marketplace_cart, marketplace_categories, marketplace_coupons, marketplace_order_items, marketplace_orders, marketplace_products, marketplace_reviews, marketplace_vendors, marketplace_wishlist_items, marketplace_wishlists, message_recipients, message_threads, messages, migration_jobs, mobile_analytics_events, mobile_app_sessions, mobile_crash_reports, mobile_devices, mobile_feature_flag_assignments, mobile_feature_flags, mobile_performance_metrics, mpesa_callbacks, mpesa_transactions, notification_recipients, notifications, offline_sync_queue, parent_communication_preferences, payment_methods, payment_plans, payments, payroll, performance_goals, performance_metrics, performance_reviews, platform_admins, platform_metrics, platform_regions, platform_settings, platform_usage_logs, predictive_alerts, push_notification_templates, push_notifications, realtime_channel_subscriptions, realtime_channels, realtime_event_deliveries, realtime_event_types, realtime_events, realtime_system_metrics, realtime_user_activity, receipts, recurring_invoices, regional_performance, regional_targets, remedial_sessions, report_permissions, report_templates, room_availability, route_stops, routes, saved_reports, scheduled_communications, scheduled_reports, school_analytics_summary, school_curriculum_implementation, school_language_settings, school_onboarding_requests, school_oversight, school_switch_audit, security_audit_logs, security_configurations, security_incidents, student_curriculum_progress, student_fee_assignments, student_learning_analytics, student_transport, subject_requirements, subjects, subscription_invoices, system_health_checks, teacher_availability, thread_participants, timetable_configurations, timetable_conflicts, timetable_entries, timetable_periods, timetable_preferences, timetable_versions, training_analytics, training_centers, training_enrollments, training_instructors, training_programs, training_records, training_resources, training_sessions, translation_keys, translation_memory, translation_namespaces, translations, transport_attendance, transport_fees, transport_incidents, trip_expenses, trip_feedback, trip_itineraries, trip_medical_info, trip_participants, trip_permissions, trip_safety_measures, trip_types, trip_vendors, trips, user_language_preferences, vehicle_insurance, vehicle_maintenance, vehicles, websocket_connections",
          "timestamp": "2025-08-06T16:37:04.068Z"
        },
        {
          "test": "users Structure",
          "status": "PASS",
          "details": "All 14 required columns exist",
          "timestamp": "2025-08-06T16:37:04.362Z"
        },
        {
          "test": "schools Structure",
          "status": "PASS",
          "details": "All 9 required columns exist",
          "timestamp": "2025-08-06T16:37:04.575Z"
        },
        {
          "test": "user_sessions Structure",
          "status": "PASS",
          "details": "All 6 required columns exist",
          "timestamp": "2025-08-06T16:37:04.729Z"
        },
        {
          "test": "password_reset_tokens Structure",
          "status": "PASS",
          "details": "All 6 required columns exist",
          "timestamp": "2025-08-06T16:37:04.984Z"
        },
        {
          "test": "Foreign Key Constraints",
          "status": "PASS",
          "details": "All 13 expected foreign keys exist",
          "timestamp": "2025-08-06T16:37:20.930Z"
        },
        {
          "test": "Critical Indexes",
          "status": "PASS",
          "details": "All 19 critical indexes exist",
          "timestamp": "2025-08-06T16:37:21.319Z"
        },
        {
          "test": "RLS Policies",
          "status": "PASS",
          "details": "All 6 critical RLS policies exist",
          "timestamp": "2025-08-06T16:37:21.574Z"
        },
        {
          "test": "Database Triggers",
          "status": "PASS",
          "details": "All 8 expected triggers exist",
          "timestamp": "2025-08-06T16:37:21.762Z"
        },
        {
          "test": "Default Admin User",
          "status": "PASS",
          "details": "Default admin user exists",
          "timestamp": "2025-08-06T16:37:21.912Z"
        },
        {
          "test": "System Settings",
          "status": "PASS",
          "details": "5 system settings exist",
          "timestamp": "2025-08-06T16:37:22.084Z"
        },
        {
          "test": "Subscription Plans",
          "status": "PASS",
          "details": "6 subscription plans exist",
          "timestamp": "2025-08-06T16:37:22.238Z"
        }
      ],
      "errors": [],
      "warnings": [
        {
          "test": "Extra Tables",
          "status": "WARN",
          "details": "Found extra tables: academic_terms, academic_years, admin_activity_logs, admin_company_assets, admin_departments, admin_employee_leaves, admin_employee_training, admin_employees, admin_performance_reviews, admin_trip_programs, admin_trip_registrations, advanced_kpis, ai_chatbot_messages, ai_chatbot_sessions, ai_models, ai_optimization_logs, ai_predictions, alert_configurations, analytics_cache, analytics_dashboards, analytics_reports, announcements, appraisal_categories, appraisal_cycles, appraisal_feedback, appraisal_goals, appraisal_history, appraisal_questions, appraisal_responses, appraisal_reviews, appraisal_templates, appraisals, approval_decision_history, approval_level_actions, approval_metrics, approval_notifications, approval_requests, approval_rule_exceptions, approval_workflow_templates, assessments, attendance_reasons, attendance_records, attendance_registers, attendance_settings, audit_trails, bulk_certificate_jobs, cache_configurations, cache_performance_logs, cache_policies, cdn_analytics, cdn_configurations, certificate_designs, certificate_fields, certificate_signatures, certificate_templates, certificate_types, certificate_verifications, certificates_issued, class_subjects, classes, classrooms, cloud_cost_tracking, cloud_storage_configurations, communication_group_members, communication_groups, communication_logs, communication_settings, communication_templates, compliance_assessments, compliance_controls, compliance_frameworks, compliance_rules, content_localizations, credit_notes, cross_school_analytics, cross_school_notifications, curriculum_assessment_standards, curriculum_equivalencies, curriculum_grade_levels, curriculum_subjects, curriculum_systems, dashboard_widgets, data_exports, data_mapping_templates, data_mining_jobs, data_protection_records, data_subject_requests, departments, development_plans, director_active_contexts, director_favorite_schools, director_school_access, disciplinary_actions, driver_licenses, drivers, employee_attendance, employees, enrollments, external_integrations, feature_flag_assignments, feature_flags, fee_assignment_approvals, fee_assignment_history, fee_assignment_items, fee_assignment_templates, fee_assignments, fee_categories, fee_discounts, fee_structure_items, fee_structures, fee_waivers, fuel_records, grade_approvals, grade_categories, grade_comments, grades, grading_scales, hr_settings, integration_logs, invoice_discounts, invoice_items, invoice_payments, invoice_reminders, invoice_series, invoice_taxes, invoice_templates, invoices, kpi_definitions, kpi_values, languages, leave_applications, leave_balances, leave_types, localization_analytics, make_up_classes, marketplace_cart, marketplace_categories, marketplace_coupons, marketplace_order_items, marketplace_orders, marketplace_products, marketplace_reviews, marketplace_vendors, marketplace_wishlist_items, marketplace_wishlists, message_recipients, message_threads, messages, migration_jobs, mobile_analytics_events, mobile_app_sessions, mobile_crash_reports, mobile_devices, mobile_feature_flag_assignments, mobile_feature_flags, mobile_performance_metrics, mpesa_callbacks, mpesa_transactions, notification_recipients, notifications, offline_sync_queue, parent_communication_preferences, payment_methods, payment_plans, payments, payroll, performance_goals, performance_metrics, performance_reviews, platform_admins, platform_metrics, platform_regions, platform_settings, platform_usage_logs, predictive_alerts, push_notification_templates, push_notifications, realtime_channel_subscriptions, realtime_channels, realtime_event_deliveries, realtime_event_types, realtime_events, realtime_system_metrics, realtime_user_activity, receipts, recurring_invoices, regional_performance, regional_targets, remedial_sessions, report_permissions, report_templates, room_availability, route_stops, routes, saved_reports, scheduled_communications, scheduled_reports, school_analytics_summary, school_curriculum_implementation, school_language_settings, school_onboarding_requests, school_oversight, school_switch_audit, security_audit_logs, security_configurations, security_incidents, student_curriculum_progress, student_fee_assignments, student_learning_analytics, student_transport, subject_requirements, subjects, subscription_invoices, system_health_checks, teacher_availability, thread_participants, timetable_configurations, timetable_conflicts, timetable_entries, timetable_periods, timetable_preferences, timetable_versions, training_analytics, training_centers, training_enrollments, training_instructors, training_programs, training_records, training_resources, training_sessions, translation_keys, translation_memory, translation_namespaces, translations, transport_attendance, transport_fees, transport_incidents, trip_expenses, trip_feedback, trip_itineraries, trip_medical_info, trip_participants, trip_permissions, trip_safety_measures, trip_types, trip_vendors, trips, user_language_preferences, vehicle_insurance, vehicle_maintenance, vehicles, websocket_connections",
          "timestamp": "2025-08-06T16:37:04.068Z"
        }
      ]
    },
    "backendTests": {
      "timestamp": "2025-08-06T16:37:22.429Z",
      "results": [
        {
          "test": "Database Health",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.308Z"
        },
        {
          "test": "Invalid Login Protection",
          "status": "FAIL",
          "details": "Unexpected error: ",
          "timestamp": "2025-08-06T16:37:22.318Z"
        },
        {
          "test": "Admin Login",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.324Z"
        },
        {
          "test": "User Management",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.327Z"
        },
        {
          "test": "File Upload",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.328Z"
        },
        {
          "test": "Rate Limiting",
          "status": "WARN",
          "details": "Rate limiting might not be working",
          "timestamp": "2025-08-06T16:37:22.388Z"
        },
        {
          "test": "CORS Configuration",
          "status": "WARN",
          "details": "Could not test CORS",
          "timestamp": "2025-08-06T16:37:22.396Z"
        },
        {
          "test": "Input Validation",
          "status": "WARN",
          "details": "Unexpected validation response",
          "timestamp": "2025-08-06T16:37:22.399Z"
        },
        {
          "test": "API Consistency: GET http://localhost:5000/health",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.404Z"
        },
        {
          "test": "API Consistency: GET http://localhost:5000/api",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.408Z"
        },
        {
          "test": "API Consistency: GET http://localhost:5000/api/auth/me",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.412Z"
        },
        {
          "test": "API Consistency: GET http://localhost:5000/api/users/profile",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.415Z"
        }
      ],
      "errors": [
        {
          "test": "Database Health",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.308Z"
        },
        {
          "test": "Invalid Login Protection",
          "status": "FAIL",
          "details": "Unexpected error: ",
          "timestamp": "2025-08-06T16:37:22.318Z"
        },
        {
          "test": "Admin Login",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.324Z"
        },
        {
          "test": "User Management",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.327Z"
        },
        {
          "test": "File Upload",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.328Z"
        },
        {
          "test": "API Consistency: GET http://localhost:5000/health",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.404Z"
        },
        {
          "test": "API Consistency: GET http://localhost:5000/api",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.408Z"
        },
        {
          "test": "API Consistency: GET http://localhost:5000/api/auth/me",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.412Z"
        },
        {
          "test": "API Consistency: GET http://localhost:5000/api/users/profile",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.415Z"
        }
      ],
      "warnings": [
        {
          "test": "Rate Limiting",
          "status": "WARN",
          "details": "Rate limiting might not be working",
          "timestamp": "2025-08-06T16:37:22.388Z"
        },
        {
          "test": "CORS Configuration",
          "status": "WARN",
          "details": "Could not test CORS",
          "timestamp": "2025-08-06T16:37:22.396Z"
        },
        {
          "test": "Input Validation",
          "status": "WARN",
          "details": "Unexpected validation response",
          "timestamp": "2025-08-06T16:37:22.399Z"
        }
      ]
    },
    "securityTests": {
      "timestamp": "2025-08-06T16:37:22.587Z",
      "results": [
        {
          "test": "Brute Force Protection",
          "status": "WARN",
          "details": "No rate limiting detected",
          "timestamp": "2025-08-06T16:37:22.469Z"
        },
        {
          "test": "Valid Login",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.473Z"
        },
        {
          "test": "Authorization Tests",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.474Z"
        },
        {
          "test": "Input Validation",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.475Z"
        },
        {
          "test": "General Rate Limiting",
          "status": "WARN",
          "details": "Rate limiting might not be working",
          "timestamp": "2025-08-06T16:37:22.524Z"
        },
        {
          "test": "Authentication Rate Limiting",
          "status": "WARN",
          "details": "Auth rate limiting might not be working",
          "timestamp": "2025-08-06T16:37:22.559Z"
        },
        {
          "test": "Security Headers",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.564Z"
        },
        {
          "test": "CORS Configuration",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.569Z"
        },
        {
          "test": "File Upload Security",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.570Z"
        },
        {
          "test": "Error Handling Security",
          "status": "FAIL",
          "details": "Cannot read properties of undefined (reading 'toLowerCase')",
          "timestamp": "2025-08-06T16:37:22.577Z"
        }
      ],
      "errors": [
        {
          "test": "Valid Login",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.473Z"
        },
        {
          "test": "Authorization Tests",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.474Z"
        },
        {
          "test": "Input Validation",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.475Z"
        },
        {
          "test": "Security Headers",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.564Z"
        },
        {
          "test": "CORS Configuration",
          "status": "FAIL",
          "details": "",
          "timestamp": "2025-08-06T16:37:22.569Z"
        },
        {
          "test": "File Upload Security",
          "status": "FAIL",
          "details": "No admin token available",
          "timestamp": "2025-08-06T16:37:22.570Z"
        },
        {
          "test": "Error Handling Security",
          "status": "FAIL",
          "details": "Cannot read properties of undefined (reading 'toLowerCase')",
          "timestamp": "2025-08-06T16:37:22.577Z"
        }
      ],
      "warnings": [
        {
          "test": "Brute Force Protection",
          "status": "WARN",
          "details": "No rate limiting detected",
          "timestamp": "2025-08-06T16:37:22.469Z"
        },
        {
          "test": "General Rate Limiting",
          "status": "WARN",
          "details": "Rate limiting might not be working",
          "timestamp": "2025-08-06T16:37:22.524Z"
        },
        {
          "test": "Authentication Rate Limiting",
          "status": "WARN",
          "details": "Auth rate limiting might not be working",
          "timestamp": "2025-08-06T16:37:22.559Z"
        }
      ]
    }
  }
}